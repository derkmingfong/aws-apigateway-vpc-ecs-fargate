Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.api_gateway.aws_api_gateway_deployment.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_deployment" "main" {
      [32m+[0m[0m created_date  = (known after apply)
      [32m+[0m[0m execution_arn = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m invoke_url    = (known after apply)
      [32m+[0m[0m rest_api_id   = (known after apply)
      [32m+[0m[0m stage_name    = "dev-env"
      [32m+[0m[0m variables     = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_integration.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_integration" "main" {
      [32m+[0m[0m cache_namespace         = (known after apply)
      [32m+[0m[0m connection_id           = (known after apply)
      [32m+[0m[0m connection_type         = "VPC_LINK"
      [32m+[0m[0m http_method             = "ANY"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m integration_http_method = "ANY"
      [32m+[0m[0m passthrough_behavior    = (known after apply)
      [32m+[0m[0m request_parameters      = {
          [32m+[0m[0m "integration.request.path.proxy" = "method.request.path.proxy"
        }
      [32m+[0m[0m resource_id             = (known after apply)
      [32m+[0m[0m rest_api_id             = (known after apply)
      [32m+[0m[0m timeout_milliseconds    = 29000
      [32m+[0m[0m type                    = "HTTP_PROXY"
      [32m+[0m[0m uri                     = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_method.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_method" "main" {
      [32m+[0m[0m api_key_required   = false
      [32m+[0m[0m authorization      = "NONE"
      [32m+[0m[0m http_method        = "ANY"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m request_parameters = {
          [32m+[0m[0m "method.request.path.proxy" = true
        }
      [32m+[0m[0m resource_id        = (known after apply)
      [32m+[0m[0m rest_api_id        = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_resource.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_resource" "main" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m parent_id   = (known after apply)
      [32m+[0m[0m path        = (known after apply)
      [32m+[0m[0m path_part   = "{proxy+}"
      [32m+[0m[0m rest_api_id = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_rest_api.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_rest_api" "main" {
      [32m+[0m[0m api_key_source           = "HEADER"
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m created_date             = (known after apply)
      [32m+[0m[0m execution_arn            = (known after apply)
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m minimum_compression_size = -1
      [32m+[0m[0m name                     = "api-gateway-fdm-platform-dev"
      [32m+[0m[0m root_resource_id         = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_vpc_link.this[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_vpc_link" "this" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "vpc-link-fdm-platform-dev"
      [32m+[0m[0m target_arns = (known after apply)
    }

[1m  # module.ecs_cluster.aws_ecs_cluster.main[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "main" {
      [32m+[0m[0m arn  = (known after apply)
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m name = "fdm-platform-dev-cluster"
      [32m+[0m[0m tags = {
          [32m+[0m[0m "Name" = "fdm-platform-dev-cluster"
        }
    }

[1m  # module.ecs_task_definition_and_service.aws_ecs_service.main[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "main" {
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 3
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "fdm-platform-dev-service"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m task_definition                    = "fdm-platform-dev"

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "fdm-platform-dev"
          [32m+[0m[0m container_port   = 5432
          [32m+[0m[0m target_group_arn = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = false
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = (known after apply)
        }
    }

[1m  # module.ecs_task_definition_and_service.aws_ecs_task_definition.main[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "main" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m container_definitions    = jsonencode(
            [
              [32m+[0m[0m {
                  [32m+[0m[0m cpu          = 1024
                  [32m+[0m[0m image        = "postgres:14.13"
                  [32m+[0m[0m memory       = 2048
                  [32m+[0m[0m name         = "fdm-platform-dev"
                  [32m+[0m[0m networkMode  = "awsvpc"
                  [32m+[0m[0m portMappings = [
                      [32m+[0m[0m {
                          [32m+[0m[0m containerPort = 5432
                          [32m+[0m[0m hostPort      = 5432
                          [32m+[0m[0m protocol      = "tcp"
                        },
                    ]
                },
            ]
        )
      [32m+[0m[0m cpu                      = "1024"
      [32m+[0m[0m execution_role_arn       = (known after apply)
      [32m+[0m[0m family                   = "fdm-platform-dev"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "2048"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m task_role_arn            = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_iam_role.main_ecs_tasks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "main_ecs_tasks" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = ""
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "main_ecs_tasks-fdm-platform-dev-role"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_iam_role.task_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "task_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = ""
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ecs_tasks-fdm-platform-dev-role"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_iam_role_policy.main_ecs_tasks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "main_ecs_tasks" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "main_ecs_tasks-fdm-platform-dev-policy"
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Get*",
                          [32m+[0m[0m "s3:List*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role   = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_iam_role_policy.task_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "task_role_policy" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "ecs_tasks-fdm-platform-dev-policy"
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Get*",
                          [32m+[0m[0m "s3:List*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role   = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_lb.nlb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "nlb" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m arn_suffix                       = (known after apply)
      [32m+[0m[0m dns_name                         = (known after apply)
      [32m+[0m[0m enable_cross_zone_load_balancing = false
      [32m+[0m[0m enable_deletion_protection       = false
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m internal                         = true
      [32m+[0m[0m ip_address_type                  = (known after apply)
      [32m+[0m[0m load_balancer_type               = "network"
      [32m+[0m[0m name                             = "nlb-fdm-platform-dev"
      [32m+[0m[0m security_groups                  = (known after apply)
      [32m+[0m[0m subnets                          = (known after apply)
      [32m+[0m[0m tags                             = {
          [32m+[0m[0m "Environment" = "dev"
        }
      [32m+[0m[0m vpc_id                           = (known after apply)
      [32m+[0m[0m zone_id                          = (known after apply)
    }

[1m  # module.ecs_task_definition_and_service.aws_lb_listener.nlb_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "nlb_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 5432
      [32m+[0m[0m protocol          = "TCP"
      [32m+[0m[0m ssl_policy        = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.ecs_task_definition_and_service.aws_lb_target_group.nlb_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "nlb_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m deregistration_delay               = 300
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m name                               = "nlb-ecs-dev-tg"
      [32m+[0m[0m port                               = 5432
      [32m+[0m[0m protocol                           = "TCP"
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_route_table_association.subnet_route_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "subnet_route_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_route_table_association.subnet_route_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "subnet_route_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_security_group.ecs_tasks[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecs_tasks" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "allow inbound access from the ECS ALB only"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = (known after apply)
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 5432
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5432
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "fdm-platform-ecs-tasks-sg-dev"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_security_group.lb[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "lb" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "controls access to the ALB"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 8080
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 8080
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "fdm-platform-alb-sg-dev"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_subnet.private_subnet[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation = false
      [32m+[0m[0m availability_zone               = "eu-west-1a"
      [32m+[0m[0m availability_zone_id            = (known after apply)
      [32m+[0m[0m cidr_block                      = "10.0.0.0/24"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                 = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id  = (known after apply)
      [32m+[0m[0m map_public_ip_on_launch         = false
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Name" = "fdm-platform-private-subnet-dev"
        }
      [32m+[0m[0m vpc_id                          = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_subnet.private_subnet[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation = false
      [32m+[0m[0m availability_zone               = "eu-west-1b"
      [32m+[0m[0m availability_zone_id            = (known after apply)
      [32m+[0m[0m cidr_block                      = "10.0.4.0/24"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                 = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id  = (known after apply)
      [32m+[0m[0m map_public_ip_on_launch         = false
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Name" = "fdm-platform-private-subnet-dev"
        }
      [32m+[0m[0m vpc_id                          = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_vpc.custom_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "custom_vpc" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m assign_generated_ipv6_cidr_block = false
      [32m+[0m[0m cidr_block                       = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id           = (known after apply)
      [32m+[0m[0m default_route_table_id           = (known after apply)
      [32m+[0m[0m default_security_group_id        = (known after apply)
      [32m+[0m[0m dhcp_options_id                  = (known after apply)
      [32m+[0m[0m enable_classiclink               = (known after apply)
      [32m+[0m[0m enable_classiclink_dns_support   = (known after apply)
      [32m+[0m[0m enable_dns_hostnames             = true
      [32m+[0m[0m enable_dns_support               = true
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m instance_tenancy                 = "default"
      [32m+[0m[0m ipv6_association_id              = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                  = (known after apply)
      [32m+[0m[0m main_route_table_id              = (known after apply)
      [32m+[0m[0m owner_id                         = (known after apply)
      [32m+[0m[0m tags                             = {
          [32m+[0m[0m "Name" = "fdm-platform-vpc-dev"
        }
    }

[1m  # module.vpc_for_ecs_fargate.aws_vpc_endpoint.cloudwatch[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "cloudwatch" {
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.logs"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "CloudWatch VPC Endpoint Interface - dev"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_vpc_endpoint.ecr_api[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_api" {
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.ecr.api"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "ECR API VPC Endpoint Interface - dev"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_vpc_endpoint.ecr_dkr[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_dkr" {
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.ecr.dkr"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "ECR Docker VPC Endpoint Interface - dev"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc_for_ecs_fargate.aws_vpc_endpoint.s3[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "s3" {
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = false
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.s3"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "S3 VPC Endpoint Gateway - dev"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1mPlan:[0m 27 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...
